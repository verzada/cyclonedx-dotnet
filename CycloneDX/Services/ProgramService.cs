using System;
using System.CommandLine;
using System.IO;
using CycloneDX.Interfaces;
using CycloneDX.Models;

namespace CycloneDX.Services
{
    public class ProgramService:IProgramService
    {
        public ProgramService()
        {

        }

        public RootCommand SetupCommandLineApplication()
        {
            var rootCommand = new RootCommand("A .NET Core global tool which creates CycloneDX Software Bill-of-Materials (SBOM) from .NET projects.")
            {
                Name = "dotnet"
            };

            var version = new Option<bool>("--version","Output the tool version and exit");

            var solutionOrProjectFile = new Option<string>("--path", "The path to a .sln, .csproj, .vbproj, or packages.config file or the path to a directory which will be recursively analyzed for packages.config files");
            solutionOrProjectFile.IsRequired = true;

            var outputDirectory = new Option<string>("--o", "The directory to write the BOM");
            outputDirectory.IsRequired = true;

            var json = new Option<string>("--j", "Produce a JSON BOM instead of XML");
            var excludeDev = new Option<bool>("--exclude-dev", "Exclude development dependencies from the BOM");

            var excludeTestProjects = new Option<bool>("--exclude-test-projects", "Exclude test projects from the BOM");

            var nugetBaseUrl = new Option<string>("--url", "Alternative NuGet repository URL to https://<yoururl>/nuget/<yourrepository>/v3/index.json");
            var nugetBaseUrlUsername = new Option<string>("--baseUrlUsername", "Alternative NuGet repository username");
            var nugetBaseUrlUserPassword = new Option<string>("--baseUrlUserPassword", "Alternative NuGet repository username password/apikey");
            var isBaseUrlPasswordClearText = new Option<bool>("--isBaseUrlPasswordClearText", "Alternative NuGet repository password is cleartext");

            var scanProjectReferences = new Option<bool>("--recursive", "To be used with a single project file, it will recursively scan project references of the supplied .csproj");

            var noSerialNumber = new Option<bool>("--no-serial-number", "Optionally omit the serial number from the resulting BOM");

            var githubUsername = new Option<string>("--github-username", "Optionally provide a GitHub username for license resolution. If set you also need to provide a GitHub personal access token");
            var githubToken = new Option<string>("--github-token", "Optionally provide a GitHub personal access token for license resolution. If set you also need to provide a GitHub username");
            var githubBearerToken = new Option<string>("--github-bearer-token", "Optionally provide a GitHub bearer token for license resolution. This is useful in GitHub actions");
            var disableGithubLicenses = new Option<bool>("--disable-github-licenses", "Optionally disable GitHub license resolution");

            var disablePackageRestore = new Option<bool>("--disable-package-restore", "Optionally disable package restore");
            var disableHashComputation = new Option<bool>("--disable-hash-computation", "Optionally disable hash computation for packages");

            //  var dotnetCommandTimeout = new Option<int>("--dotnet-command-timeout", "dotnet command timeout in milliseconds (primarily used for long dotnet restore operations)", () => 30000);
            var dotnetCommandTimeout = new Option<int>(
                            name: "--dotnet-command-timeout",
                            description: "dotnet command timeout in milliseconds (primarily used for long dotnet restore operations)",
                            getDefaultValue: () => 30000);

            var baseIntermediateOutputPath = new Option<string>("--import-metadata-path", "Optionally provide a metadata template which has project specific details.");

            var setName = new Option<string>("--set-name", "Override the autogenerated BOM metadata component name.");
            var setVersion = new Option<string>("--set-version", "Override the default BOM metadata component version (defaults to 0.0.0).");
            var setType = new Option<Component.Classification>("--set-type", "Override the default BOM metadata component type (defaults to application).");

            var cycloneDxCommand = new Command("cyclonedx", "A .NET Core global tool which creates CycloneDX Software Bill-of-Materials (SBOM) from .NET projects.")
            {
                version,
                solutionOrProjectFile,
                outputDirectory,
                json,excludeDev,
                excludeTestProjects,
                nugetBaseUrl,nugetBaseUrlUsername,nugetBaseUrlUserPassword,isBaseUrlPasswordClearText,
                scanProjectReferences,
                noSerialNumber,
                githubUsername,githubToken,githubBearerToken,disableGithubLicenses,
                disablePackageRestore,
                disableHashComputation,
                dotnetCommandTimeout,
                baseIntermediateOutputPath,
                setName,setVersion
            };
            rootCommand.Add(cycloneDxCommand);
            //rootCommand.SetHandler(new ArgumentBinder(
            //    version,
            //    solutionOrProjectFile,
            //    outputDirectory,
            //    json, excludeDev,
            //    excludeTestProjects,
            //    nugetBaseUrl, nugetBaseUrlUsername, nugetBaseUrlUserPassword, isBaseUrlPasswordClearText,
            //    scanProjectReferences,
            //    noSerialNumber,
            //    githubUsername, githubToken, githubBearerToken, disableGithubLicenses,
            //    disablePackageRestore,
            //    disableHashComputation,
            //    dotnetCommandTimeout,
            //    baseIntermediateOutputPath,
            //    setName, setVersion
            //    );
            rootCommand.SetHandler((ArgumentsModel argumentModel) => { Console.WriteLine($"version: {argumentModel.Version}"); },
                new ArgumentBinder(
                version,
                solutionOrProjectFile,
                outputDirectory,
                json, excludeDev,
                excludeTestProjects,
                nugetBaseUrl, nugetBaseUrlUsername, nugetBaseUrlUserPassword, isBaseUrlPasswordClearText,
                scanProjectReferences,
                noSerialNumber,
                githubUsername, githubToken, githubBearerToken, disableGithubLicenses,
                disablePackageRestore,
                disableHashComputation,
                dotnetCommandTimeout,
                baseIntermediateOutputPath,
                setName, setVersion, setType
                ));
            return rootCommand;
        }

        //private Option<string> CreateStringOption(string name, string description, string defaultValue)
        //{
        //    var stringOption = new Option<string>(name, description, () => string.);
        //}

    }
}
